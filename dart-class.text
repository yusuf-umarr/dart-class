Dart is an open-source, class-based programming language developed by Google. It was created with a focus on building web and mobile applications. Dart is often associated with the Flutter framework, which is a popular toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase. Flutter uses Dart as its primary language.

Flutter is an open source framework to create high quality, high performance mobile applications across mobile operating systems - Android and iOS. It provides a simple, powerful, efficient and easy to understand SDK to write mobile application in Google’s own language, Dart. This tutorial walks through the basics of Flutter framework, installation of Flutter SDK, setting up Android Studio to develop Flutter based application, architecture of Flutter framework and developing all type of mobile applications using Flutter framework.

other framework for creating a mobile app, include 
react-native: cross-platform (android, ios),
kotlin -android
java - android,
swift - ios,
xamarin - cross-platform,\
etc.


Advantage of cross-platform (flutter) over natives
Single Codebase: Flutter allows you to write code once and run it on multiple platforms (iOS, Android, web, desktop, etc.), which significantly reduces development effort and time.

Cost-Effective: Developing with Flutter can be more cost-effective for businesses because they can maintain a single codebase instead of separate ones for each platform.

Disavantages:

Larger App Size: Flutter apps tend to be larger in size compared to native apps
Longer Compilation Times: Flutter's compilation times during development can be longer compared to native development, 
Performance Limitations: While Flutter apps can achieve native-level performance, certain highly specialized or graphics-intensive apps may still perform better when written natively.



part2.

In Dart, variables are used to store data that can be manipulated and accessed within your programs. Dart is a statically-typed language, which means you need to specify the data type of a variable when declaring it. Here are some examples of declaring and using variables in Dart:
* 		Declaring Variables:
* 		You can declare variables using the 
var, 
final, or 
const keywords.

some examples:
// Using 'var' to declare and initialize a variable

var name = "Alice"; // String 
var age = 30; //int
var score =10.5; //double
var languages = ["yoruba", "english", "housa"]; //list
var isStudent = true; //boolean
studentData= {"name":"Ahkeem", "age":"20"} // map



// Using 'final' to declare a constant variable
final int age = 30;

// Using 'const' to declare a compile-time constant
const double piValue = 3.141592;


Variable Types:
Dart supports various types of variables, including numbers, strings, booleans, lists, maps, and user-defined classes. Here are some examples:

int age = 25;  //  var age = 20
double salary = 50000.50; 
String message = "Hello, Dart! i am software engineer"; 
bool isStudent = true;

List<String> fruits = ["apple", "banana", "cherry", 20];

List<dynamic> someData = ["yoruba", "english", 24];

List someData = ["yoruba", "english", 24];


Map<String, int> scores = {
  "Alice": 95,
  "Bob": 88,
  "Carol": "you",
};

Map<String, dynamic> studentData= {
    "name":"Ahkeem",
     "age":20,
     "score": 100.6
}




--Variable Assignment:
You can assign values to variables using the assignment operator (=). Dart is statically-typed, so you cannot change the type of a variable once it's declared.

var number = 42; // Declaring and initializing 'number'
number = 20; // Reassigning 'number' with a new value


-- Dynamic Typing:
If you want a variable to be dynamically typed and accept values of any type, you can use the dynamic type.

dynamic dynamicVar = "This can be a string";
dynamicVar = 42; // Now it can hold an integer;
dynamic score = 20.5;
dynamic isStudent = true;

--Null Safety:
Dart has introduced null safety with the ? and ! operators to handle nullable variables. A variable with a ? can be null, while a variable with a ! asserts that it is non-null.

String? nullableString = null;
String nonNullString = "Dart!";

int lenght;

print(lenght?)// null

print(nullableString?.length); // Safely access the length (null-safe)

print(nonNullString.length);    // Directly access the length

--Final and Const:
The final keyword is used for declaring variables that can be assigned only once. The const keyword is used for compile-time constant variables.

final name = "Alice"; // Value can't be changed

const piValue = 3.141592; // A compile-time constant

--String Interpolation:
Dart allows you to concatenate strings and variables using string interpolation.

String name = "Alice";
int age = 30;

print("My name is $name, and I am $age years old.");




Object-oriented programming (OOP) is a way of organizing and designing software using objects, which are instances of classes. Dart is a type of OOP.
These OOP principles in Dart help you design, structure, and manage your code by promoting modularity, reusability, and maintainability. They also enable you to model real-world concepts and relationships effectively in your software.

Here are the key OOP concepts as they relate to Dart:

1. Classes: In Dart, a class is a blueprint for creating objects. It defines the attributes (fields) and behaviors (methods) that objects of the class will have. You can create your own custom classes to model real-world entities or abstract concepts. 

For example:


class Person {
  String name;
  int age;

  void sayHello() {
    print("Hello, my name is $name, and I am $age years old.");
  }

  dynamic sayHello() {
    print("Hello, my name is $name, and I am $age years old.");
    return ""
  }
}

2. Objects: Objects are instances of classes. They represent specific data with their attributes and can perform actions using their methods. You create objects from classes like this:

var p1 = Person();
Person p1 = Person();

p1.name = "Alice";
p1.age = 30;
p1.sayHello();


3. Encapsulation:  Dart allows you to control the visibility of class members using private (_) and public modifiers.

class Person {
  String _name; // Private attribute


  int age; // Public attribute

  Person(this._name, this.age); // Constructor

  void sayHello() {
    print("Hello, my name is $_name, and I am $age years old.");
  }
}

4. Inheritance: Inheritance allows you to create new classes that are based on existing classes, inheriting their attributes and behaviors. Dart supports single inheritance, meaning a class can inherit from only one superclass.

class Student extends Person {
  String school;

  Student(String name, int age, this.school) : super(name, age); //constructor 

  void study() {
    print("$name is studying at $school.");
  }

  print(name) == out=> Alice
}

5. Polymorphism: Polymorphism enables objects of different classes to be treated as objects of a common superclass. In Dart, this is achieved through method overriding.


class Animal {
    String name = ahkeem;
  void makeSound() {
    print("Some generic animal sound.");
  }
}


class Dog extends Animal {
  @override
  name =lawal;
  void makeSound() {
    print("Woof!");
  }
  print(name)  output==>lawal
}

class Cat extends Animal {
  @override
  void makeSound() {
    print("Meow!");
  }
}




